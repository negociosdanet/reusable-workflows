name: Deploy Java Release to Nexus

on:
  workflow_call:
    inputs:
      java-version:
        required: false
        type: string
        default: '21'
      dry-run:
        required: true
        type: boolean
      version:
        required: true
        type: string
    secrets:
      NEXUS_USERNAME:
        required: true
      NEXUS_PASSWORD:
        required: true

permissions:
  contents: read

jobs:
  release-finalize-and-deploy:
    name: Finalize Version & Deploy to Nexus
    runs-on: ubuntu-latest
    outputs:
      final_version: ${{ steps.cleanup-version.outputs.final_version || inputs.version }}

    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: ${{ github.ref_name }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Configure Maven settings.xml
        uses: s4u/maven-settings-action@v3.1.0
        with:
          servers: |
            [{
              "id": "nexus-releases",
              "username": "${{ secrets.NEXUS_USERNAME }}",
              "password": "${{ secrets.NEXUS_PASSWORD }}"
            }]

      - name: Detect Current Version
        id: current-version
        run: |
          set -euo pipefail
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Finalize Version (remove RC)
        id: cleanup-version
        run: |
          set -euo pipefail
          VERSION="${{ steps.current-version.outputs.version }}"
          if [[ "$VERSION" == *-RC* ]]; then
            FINAL_VERSION=$(echo "$VERSION" | sed 's/-RC[0-9]*//')
            mvn versions:set -DnewVersion=$FINAL_VERSION
            mvn versions:commit
          else
            FINAL_VERSION="$VERSION"
          fi
          echo "final_version=$FINAL_VERSION" >> $GITHUB_OUTPUT

      - name: Validate Build Again
        run: mvn verify

      - name: Skipping deploy to Nexus
        if: ${{ inputs.dry-run == true }}
        run: echo "ðŸŸ¡ Dry-run mode ON â€” skipping actual deploy to Nexus."

      - name: Deploy to Nexus
        if: ${{ inputs.dry-run == false }}
        run: mvn deploy -DskipTests --batch-mode

      - name: Commit Final Version
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git diff --quiet || git commit -am "chore(release): finalize version ${{ steps.cleanup-version.outputs.final_version }}" || true
          git push

  release-create-tag:
    name: Release - Create Git Tag
    needs: release-finalize-and-deploy
    runs-on: ubuntu-latest
    env:
      FINAL_VERSION: ${{ needs.release-finalize-and-deploy.outputs.final_version }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: ${{ github.ref_name }}

      - name: Create Git Tag
        run: |
          set -euo pipefail
          git tag "v$FINAL_VERSION"
          git push origin "v$FINAL_VERSION"

  release-create-gh-release:
    name: Release - GitHub Release
    needs: release-create-tag
    runs-on: ubuntu-latest
    env:
      FINAL_VERSION: ${{ needs.release-finalize-and-deploy.outputs.final_version }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: ${{ github.head_ref }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.FINAL_VERSION }}
          name: Release v${{ env.FINAL_VERSION }}
          body: "ðŸ“¦ Final version released: v${{ env.FINAL_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-bump-develop:
    name: Release - Bump Develop Branch to Next Snapshot
    needs: release-create-gh-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Develop Branch
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: develop

      - name: Bump develop to next snapshot
        run: |
          set -euo pipefail
          git fetch origin develop
          git checkout develop

          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
          NEXT_MINOR=$((MINOR + 1))
          NEXT_VERSION="$MAJOR.$NEXT_MINOR.0-SNAPSHOT"

          echo "Updating develop to: $NEXT_VERSION"
          mvn versions:set -DnewVersion=$NEXT_VERSION
          mvn versions:commit

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git diff --quiet || git commit -am "chore: start next snapshot $NEXT_VERSION on develop" || true
          git push origin develop