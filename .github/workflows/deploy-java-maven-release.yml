name: CI - Final Release (Java Library)

on:
  workflow_call:
    inputs:
      java-version:
        required: false
        type: string
        default: '21'
    secrets:
      NEXUS_USERNAME:
        required: true
      NEXUS_PASSWORD:
        required: true

jobs:
  prepare-release:
    name: Prepare & Deploy Final Version
    needs: build
    runs-on: ubuntu-latest
    outputs:
      final_version: ${{ steps.cleanup-version.outputs.final_version }}

    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: ${{ github.head_ref }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Configure Maven settings.xml
        uses: s4u/maven-settings-action@v3.1.0
        with:
          servers: |
            [{
              "id": "nexus-releases",
              "username": "${{ secrets.NEXUS_USERNAME }}",
              "password": "${{ secrets.NEXUS_PASSWORD }}"
            }]

      - name: Detect Current Version
        id: current-version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Finalize Version (remove RC)
        if: contains(steps.current-version.outputs.version, '-RC')
        id: cleanup-version
        run: |
          FINAL_VERSION=$(echo "${{ steps.current-version.outputs.version }}" | sed 's/-RC[0-9]*//')
          echo "final_version=$FINAL_VERSION" >> $GITHUB_OUTPUT
          mvn versions:set -DnewVersion=$FINAL_VERSION
          mvn versions:commit

      - name: Deploy Final Release
        run: mvn deploy -DskipTests --batch-mode

      - name: Commit Final Version
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "chore(release): finalize version ${{ steps.cleanup-version.outputs.final_version }}"
          git push
          git push

  tag-and-release:
    name: Tag, GitHub Release & Bump Develop
    needs: prepare-release
    runs-on: ubuntu-latest
    env:
      FINAL_VERSION: ${{ needs.prepare-release.outputs.final_version }}

    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: ${{ github.head_ref }}

      - name: Create Git Tag
        run: |
          git tag "v$FINAL_VERSION"
          git push origin "v$FINAL_VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.FINAL_VERSION }}
          name: Release v${{ env.FINAL_VERSION }}
          body: |
            ðŸ“¦ Final version released: v${{ env.FINAL_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump develop to next snapshot
        run: |
          git fetch origin develop
          git checkout develop

          MAJOR=$(echo "$FINAL_VERSION" | cut -d. -f1)
          MINOR=$(echo "$FINAL_VERSION" | cut -d. -f2)
          NEXT_MINOR=$((MINOR + 1))
          NEXT_VERSION="$MAJOR.$NEXT_MINOR.0-SNAPSHOT"

          echo "Updating develop to: $NEXT_VERSION"
          mvn versions:set -DnewVersion=$NEXT_VERSION
          mvn versions:commit

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "chore: start next snapshot $NEXT_VERSION on develop"
          git push origin develop