name: Build docker image e deploy

on:
  workflow_call:
    inputs:
    
      java-version:
        required: false
        type: string
        default: '21'
      
      aws-region:
        required: false
        type: string
        default: 'us-east-1'
    
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: ${{ inputs.java-version }}
          cache: maven

      - name: Build with Maven
        run: mvn clean package

  create-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: ${{ inputs.java-version }}
          cache: maven

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract Base Version
        id: version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-.*//')
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT

      - name: Build, tag, and push Docker image to ECR
        env:
          AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: ${{ github.repository }}-ecr
          IMAGE_TAG: ${{ steps.version.outputs.base_version }}
        run: |

          ECR_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  detect-terraform-infra:
    runs-on: ubuntu-latest
    outputs:
      has-terraform: ${{ steps.check.outputs.has_tf }}
    steps:
      - uses: actions/checkout@v4

      - id: check
        run: |
          if compgen -G "infra/*.tf" > /dev/null; then
            echo "has_tf=true" >> $GITHUB_OUTPUT
          else
            echo "has_tf=false" >> $GITHUB_OUTPUT
          fi

  apply-terraform-infra:
    runs-on: ubuntu-latest
    needs: [build, detect-terraform-infra]
    if: needs.detect-terraform-infra.outputs.has-terraform == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.6"

      - name: Initialize terraform
        run: cd infra && terraform init

      - name: Validate terraform
        run: cd infra && terraform validate

      - name: Plan terraform
        run: cd infra && terraform plan -var-file="terraform.tfvars" -var="image_tag=${{ steps.version.outputs.base_version }}" -out=tfplan

      - name: Apply terraform
        run: cd infra && terraform apply -auto-approve -var="image_tag=${{ steps.version.outputs.base_version }}"